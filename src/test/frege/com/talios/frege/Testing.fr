module com.talios.frege.Testing where

import com.talios.frege.meetup.DataTypes
import com.talios.frege.meetup.Functions
import com.talios.frege.meetup.NativeTypes
import com.talios.frege.meetup.MutableNativeTypes

data Product = Product String Double

instance Billable Product where
  amount (Product name price) = price
  description (Product name price) = "Billable thing is a " ++ name

prod = Product "Toy Car" 39.95
box = Product "Box" 12
plate = Product "Plate" 5
products = [box, plate, prod]
cust = Customer "Mark" "NZD"

buyProducts :: (Billable b) => Customer -> [b] -> PriceType -> Invoice
buyProducts cust billables priceType = Invoice cust billableItems priceType where
  billableItems = map (\b -> mkInvoiceItem b 1 FullPrice) billables

invoice = mkInvoice cust prod 5 $ Discounted 10
javaInvoice = mkInvoice cust (Widget.new "java thing" 29) 1 $ Discounted 10

mutatedInvoice = mkInvoice cust pureWidget 1 $ Discounted 10 where
   pureWidget = ST.run pureWidgetST
   pureWidgetST :: ST s MutableWidget
   pureWidgetST = do
                    mw <- MutableWidget.new "java thing" 29
                    mw.setDescription "mutated java thing"
                    mw.freeze

main args = do
    println $ "The total price of your invoice is " ++ (show $ totalInvoice invoice)
    println $ "The total price of your java invoice is " ++ (show $ totalInvoice javaInvoice)
    println $ "The total price of your mutated java invoice is " ++ (show $ totalInvoice mutatedInvoice)
